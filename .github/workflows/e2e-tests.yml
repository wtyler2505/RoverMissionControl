name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2, 3, 4]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rover_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Node.js dependencies
      run: |
        npm ci
        cd frontend && npm ci

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Setup test environment
      run: |
        cp .env.example .env
        cp backend/.env.example backend/.env
        cp frontend/.env frontend/.env.local
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rover_test
        NODE_ENV: test
        REACT_APP_API_URL: http://localhost:8000
        REACT_APP_WS_URL: ws://localhost:8000

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Setup test database
      run: |
        cd backend
        python -c "from database import init_db; init_db()"
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rover_test

    - name: Start backend server in background
      run: |
        cd backend
        python server.py --test-mode &
        echo $! > backend.pid
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rover_test
        ENVIRONMENT: test

    - name: Verify backend health
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'

    - name: Start frontend in background
      run: |
        cd frontend
        npm start &
        echo $! > frontend.pid
        sleep 15
      env:
        NODE_ENV: test
        REACT_APP_API_URL: http://localhost:8000

    - name: Verify frontend health
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'

    - name: Run Playwright E2E tests
      run: |
        npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/${{ strategy.job-total }}
      env:
        PLAYWRIGHT_JUNIT_OUTPUT_NAME: results-${{ matrix.browser }}-${{ matrix.shard }}.xml

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results-${{ matrix.browser }}-${{ matrix.shard }}
        path: |
          test-results/
          playwright-report/
        retention-days: 7

    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}
        path: playwright-report/
        retention-days: 7

    - name: Stop services
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
          rm backend.pid
        fi
        if [ -f frontend.pid ]; then
          kill $(cat frontend.pid) || true
          rm frontend.pid
        fi

  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: e2e-tests
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci

    - name: Install Playwright browsers
      run: npx playwright install chromium

    - name: Run visual regression tests
      run: |
        npx playwright test --project=visual
      env:
        PLAYWRIGHT_UPDATE_SNAPSHOTS: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: visual-test-results
        path: |
          test-results/
          tests/e2e/snapshots/
        retention-days: 7

  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rover_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && pip install -r requirements.txt

    - name: Install Playwright
      run: npx playwright install

    - name: Setup test database
      run: |
        cd backend
        python -c "from database import init_db; init_db()"
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rover_test

    - name: Start backend server
      run: |
        cd backend
        python server.py --test-mode &
        echo $! > backend.pid
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rover_test
        ENVIRONMENT: test

    - name: Run API tests
      run: |
        npx playwright test --project=api

    - name: Stop backend
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
          rm backend.pid
        fi

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'performance')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt

    - name: Install Playwright
      run: npx playwright install chromium

    - name: Build optimized frontend
      run: |
        cd frontend
        npm run build

    - name: Start services
      run: |
        cd backend
        python server.py --test-mode &
        echo $! > backend.pid
        sleep 10
        
        cd ../frontend
        npx serve -s build -l 3000 &
        echo $! > frontend.pid
        sleep 5

    - name: Run performance tests
      run: |
        npx playwright test --project=performance

    - name: Generate Lighthouse report
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Stop services
      if: always()
      run: |
        if [ -f backend/backend.pid ]; then
          kill $(cat backend/backend.pid) || true
        fi
        if [ -f frontend/frontend.pid ]; then
          kill $(cat frontend/frontend.pid) || true
        fi

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci

    - name: Install Playwright
      run: npx playwright install chromium

    - name: Run accessibility tests
      run: |
        npx playwright test --project=accessibility

    - name: Upload accessibility results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-results
        path: test-results/
        retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests, api-tests, accessibility-tests]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-results

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Playwright Test Results
        path: 'test-results/**/results-*.xml'
        reporter: java-junit
        fail-on-error: true

    - name: Create test summary
      if: always()
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "✅ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ E2E Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.api-tests.result }}" == "success" ]; then
          echo "✅ API Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ API Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.accessibility-tests.result }}" == "success" ]; then
          echo "✅ Accessibility Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Accessibility Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Test Artifacts**: Check the workflow artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Playwright Report**: Available in the artifacts section" >> $GITHUB_STEP_SUMMARY

  # Deploy test results to GitHub Pages for easy viewing
  deploy-reports:
    name: Deploy Test Reports
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always() && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Download test reports
      uses: actions/download-artifact@v4
      with:
        pattern: playwright-report-*
        path: reports

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: reports

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4