/**
 * Export Service - Main export barrel
 * Comprehensive telemetry data export functionality
 */

// Core export service
export { ExportService } from './ExportService';
export { ChartExportService, chartExportService } from './ChartExportService';
export { DashboardExportService, dashboardExportService } from './DashboardExportService';

// Data formatters
export { CSVFormatter } from './formatters/CSVFormatter';
export { JSONFormatter } from './formatters/JSONFormatter'; 
export { PDFFormatter } from './formatters/PDFFormatter';
export { ExcelFormatter } from './formatters/ExcelFormatter';

// Types and interfaces
export type {
  ExportFormat,
  ExportDataSource,
  ExportConfig,
  ExportResult,
  ExportProgress,
  ExportJob,
  ExportFormatOptions,
  ExportTimeRange,
  StreamSelection,
  FormatterData,
  DataFormatter,
  ExportServiceEvents,
  ReportTemplate,
  ReportSection,
  ScheduledExport
} from './types/ExportTypes';

export type {
  ChartExportOptions,
  ChartDataExport
} from './ChartExportService';

export type {
  DashboardExportOptions,
  DashboardExportResult
} from './DashboardExportService';

// Default configurations
import { ExportFormatOptions } from './types/ExportTypes';

export const DEFAULT_EXPORT_OPTIONS: Record<string, Partial<ExportFormatOptions>> = {
  csv: {
    csv: {
      delimiter: ',',
      includeHeaders: true,
      quoteAll: false,
      dateFormat: 'iso',
      precision: 6
    }
  },
  json: {
    json: {
      prettyPrint: true,
      includeSchema: false,
      compress: false
    }
  },
  pdf: {
    pdf: {
      orientation: 'portrait',
      pageSize: 'A4',
      includeCharts: false,
      includeCoverPage: true,
      title: 'Telemetry Data Export Report',
      author: 'RoverMissionControl',
      header: 'Telemetry Analysis Report',
      footer: 'Generated by RoverMissionControl'
    }
  },
  xlsx: {
    xlsx: {
      includeCharts: false,
      includePivotTables: false,
      separateSheets: true,
      applyFormatting: true
    }
  }
};

/**
 * Create and configure a complete export service instance
 */
export function createExportService(
  telemetryAnalyzer: any,
  correlationAnalyzer: any,
  historicalDataManager: any,
  config?: any
) {
  const exportService = new ExportService(
    telemetryAnalyzer,
    correlationAnalyzer,
    historicalDataManager,
    config
  );

  // Register all formatters
  exportService.registerFormatter(new CSVFormatter());
  exportService.registerFormatter(new JSONFormatter());
  exportService.registerFormatter(new PDFFormatter());
  exportService.registerFormatter(new ExcelFormatter());

  return exportService;
}

/**
 * Utility functions for export configuration
 */
export const ExportUtils = {
  /**
   * Get default configuration for a specific format
   */
  getDefaultConfig(format: string): Partial<ExportFormatOptions> {
    return DEFAULT_EXPORT_OPTIONS[format] || {};
  },

  /**
   * Validate export filename
   */
  validateFilename(filename: string): boolean {
    const invalidChars = /[<>:"/\\|?*]/;
    return !invalidChars.test(filename) && filename.trim().length > 0;
  },

  /**
   * Get supported MIME types for a format
   */
  getMimeTypes(format: string): string[] {
    switch (format) {
      case 'csv':
        return ['text/csv', 'application/csv'];
      case 'json':
        return ['application/json', 'text/json'];
      case 'pdf':
        return ['application/pdf'];
      case 'xlsx':
        return [
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          'application/vnd.ms-excel'
        ];
      default:
        return ['application/octet-stream'];
    }
  },

  /**
   * Estimate export file size (rough estimation in bytes)
   */
  estimateFileSize(
    streamCount: number,
    dataPointCount: number,
    format: string,
    includeAnalysis: boolean = false,
    includeCorrelations: boolean = false
  ): number {
    let baseSize = 0;
    
    // Base size per data point varies by format
    switch (format) {
      case 'csv':
        baseSize = dataPointCount * 50; // ~50 bytes per data point in CSV
        break;
      case 'json':
        baseSize = dataPointCount * 100; // ~100 bytes per data point in JSON
        break;
      case 'pdf':
        baseSize = Math.max(50000, dataPointCount * 5); // PDF has overhead
        break;
      case 'xlsx':
        baseSize = Math.max(10000, dataPointCount * 20); // Excel has compression
        break;
    }

    // Add analysis overhead
    if (includeAnalysis) {
      baseSize += streamCount * 1000; // ~1KB per stream analysis
    }

    // Add correlation overhead
    if (includeCorrelations) {
      const correlationCount = (streamCount * (streamCount - 1)) / 2;
      baseSize += correlationCount * 200; // ~200 bytes per correlation
    }

    return baseSize;
  },

  /**
   * Format file size for display
   */
  formatFileSize(bytes: number): string {
    const units = ['B', 'KB', 'MB', 'GB'];
    let size = bytes;
    let unitIndex = 0;

    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024;
      unitIndex++;
    }

    return `${size.toFixed(unitIndex === 0 ? 0 : 1)} ${units[unitIndex]}`;
  },

  /**
   * Generate suggested filename based on export configuration
   */
  generateFilename(
    config: Partial<ExportConfig>,
    timestamp: Date = new Date()
  ): string {
    const datePart = timestamp.toISOString().split('T')[0];
    const timePart = timestamp.toTimeString().split(' ')[0].replace(/:/g, '-');
    
    let filename = `telemetry_export_${datePart}_${timePart}`;
    
    if (config.dataSource) {
      filename += `_${config.dataSource.replace('-', '_')}`;
    }
    
    if (config.streams?.streamIds && config.streams.streamIds.length === 1) {
      const streamId = config.streams.streamIds[0].replace(/[^a-zA-Z0-9]/g, '_');
      filename += `_${streamId}`;
    } else if (config.streams?.streamIds && config.streams.streamIds.length < 5) {
      filename += `_${config.streams.streamIds.length}_streams`;
    }

    return filename;
  }
};